# -*- coding: utf-8 -*-
"""demandforecasting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cei32YI0UpKXYPWF-HJg3fGnNhVlaAL-
"""

import pandas as pd

df= pd.read_csv('train.csv')

df[['day','month','year']]=df['week'].str.split('/' ,expand=True)

df=df.drop('week',axis=1)
df

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

x,y=df.drop('units_sold',axis=1),df['units_sold']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

# model.fit(x_train,y_train)

model=RandomForestRegressor(n_jobs=-1)
model.fit(x_train,y_train)

model.score(x_test,y_test)

from sklearn.metrics import root_mean_squared_error
y_pred=model.predict(x_test)
rmse=root_mean_squared_error(y_pred,y_test)
rmse

df.units_sold.describe()

df.units_sold.hist()

import numpy as np
import matplotlib.pyplot as plt
plt.scatter(y_pred,y_test)
plt.plot(np.linspace(y_pred.min(),y_pred.max()),np.linspace(y_test.min(),y_test.max()), color="black")

# df=df.drop('record_ID',axis=1)
df

df.hist(figsize=(15,8))
plt.show()

len(df.store_id.unique())

len((df.sku_id.unique()))

df=df[df.units_sold<df.units_sold.quantile(0.99)]

df

df.units_sold.hist(bins=50)

# df=df.join(pd.get_dummies(df.store_id,prefix="store")).drop('store_id',axis=1)
df
df=df.join(pd.get_dummies(df.sku_id,prefix="item")).drop('sku_id',axis=1)

df

model=RandomForestRegressor(n_jobs=-1)
x,y=df.drop(['units_sold'], axis=1),df['units_sold']


x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

model.fit(x_train,y_train)

model.score(x_test,y_test)

y_pred=model.predict(x_test)
rmse=root_mean_squared_error(y_pred,y_test)
rmse

plt.scatter(y_pred,y_test)
plt.plot(np.linspace(y_pred.min(),y_pred.max()),np.linspace(y_test.min(),y_test.max()),color="red")

from sklearn.model_selection import GridSearchCV
param_grid={
    'n_estimators':[10,20],
    'min_samples_split':[2,3]
}
model=RandomForestRegressor(n_jobs=-1)
grid_serach=GridSearchCV(model,param_grid,verbose=2,cv=3)
grid_serach.fit(x_train,y_train)

best_model=grid_serach.best_estimator_
grid_serach.best_params_

best_model.score(x_test,y_test)